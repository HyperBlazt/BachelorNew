using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Roland_IO_Malware
{
    using System.IO;
    using System.Threading;

    internal class Updater
    {
        public string UpdateDirectory = Thread.GetDomain().BaseDirectory + "Update";

        private HashSet<string> _updateHolder;

        public bool IsThereAnUpdate()
        {
            return Directory.GetFiles(UpdateDirectory).Length > 0;
        }

        public void UpdateDatabase()
        {
            foreach (var file in Directory.GetFiles(UpdateDirectory))
            {
                _updateHolder = new HashSet<string>();
                var fileName = Path.GetFileName(file);
                _updateHolder = DeserializeHashSet(file);

                // Gets the string
                var dataDirectory = Thread.GetDomain().BaseDirectory + "Data//";
                if (File.Exists(dataDirectory + "string_" + fileName))
                {
                    var completeText = DeserializeString(dataDirectory + "string_" + fileName);
                    AppendValuesAndBuild(completeText, fileName);

                }
            }
        }

        private void AppendValuesAndBuild(string completeString, string fileName)
        {
            var appendedCompleteString = completeString;
            foreach (var subString in _updateHolder)
            {
                if (!completeString.Contains(subString))
                {
                    appendedCompleteString = appendedCompleteString + subString;
                }
            }
            if (!completeString.Equals(appendedCompleteString))
            {
                var filePacementDirectoryTask = Thread.GetDomain().BaseDirectory + "Data\\";
                new SuffixArray(appendedCompleteString, fileName, filePacementDirectoryTask, false);
                
            }
        }

        public HashSet<string> DeserializeHashSet(string filePath)
        {
            if (File.Exists(filePath))
            {
                var text = File.ReadAllText(filePath);
                string[] words = text.Split('!');
                var done = words.Where(x => !string.IsNullOrEmpty(x)).ToArray().Distinct();
                return new HashSet<string>(done);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// The deserialize string.
        /// </summary>
        /// <param name="filePath">
        /// The file path.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        public string DeserializeString(string filePath)
        {
            if (File.Exists(filePath))
            {
                var bytes = File.ReadAllBytes(filePath);     
                return Encoding.UTF8.GetString(bytes);
            }
            else
            {
                return string.Empty;
            }
        }


        public static string RemoveSpecialCharacters(string str)
        {
            var sb = new StringBuilder();
            foreach (var c in str)
            {
                if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '$')
                {
                    sb.Append(c);
                }
            }
            return sb.ToString();
        }
    }
}
